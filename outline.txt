# 資產管理系統 - 開發大綱

## 一、專案核心功能

### 1. 儀表板 (Dashboard)
- **目的**: 提供所有財務狀況的總覽。
- **顯示內容**:
    - 總資產淨值 (資產 - 負債) 的趨勢圖。
    - 當月收入與支出的圓餅圖或長條圖。
    - 各帳戶餘額列表。
    - 近期交易紀錄。
    - 投資組合總價值與今日損益。

### 2. 資產與負債管理
- **目的**: 紀錄並追蹤所有資產和負債項目。
- **功能**:
    - 新增、編輯、刪除資產/負債帳戶 (例如：活期存款、信用卡、貸款)。
    - 每個帳戶可以設定初始金額。
    - 顯示所有帳戶的列表與目前餘額。
    - 自動計算總資產、總負債與淨值。

### 3. 收入與支出紀錄
- **目的**: 詳細記錄每一筆金流。
- **功能**:
    - 新增、編輯、刪除單筆收入或支出紀錄。
    - 紀錄欄位應包含：日期、金額、分類 (餐飲、交通、薪水等)、帳戶、備註。
    - 提供交易紀錄的列表，並支援篩選與搜尋功能 (依日期、分類、金額)。

### 4. 投資追蹤頁面
- **目的**: 獨立管理股票/ETF等投資項目。
- **功能**:
    - 新增、編輯、刪除持有的股票標的。
    - 記錄每支股票的買賣交易：買賣日期、股數、成交價。
    - 記錄每次收到的配息：配息日期、金額。
    - **自動計算**:
        - 平均持股成本。
        - 目前持股市值 (可考慮串接即時股價 API)。
        - 未實現損益。
        - 已實現損益。
        - 總報酬率。

## 二、技術棧 (MERN Stack)

- **前端 (Frontend)**: React
    - UI 框架: Material-UI。
    - 狀態管理: React Context。
    - 圖表庫: Recharts。
    - 路由: React Router。
- **後端 (Backend)**: Node.js
    - 框架: Express.js。
    - ODM (Object Data Modeling): Mongoose (用於操作 MongoDB)。
    - 身份驗證: JWT (JSON Web Tokens)。
- **資料庫 (Database)**: MongoDB

## 三、開發步驟建議

1.  **環境建置**: 建立前後端專案資料夾，安裝 Node.js、React 開發環境。
2.  **資料庫設計**: 根據功能需求，設計 MongoDB 的資料結構 (Schema)。
3.  **後端 API 開發**:
    - 開發使用者身份驗證 API。
    - 開發資產、交易、投資等 CRUD (Create, Read, Update, Delete) API。
    - 開發儀表板需要的數據整合 API。
4.  **前端畫面開發**:
    - 建立專案路由結構。
    - 刻畫各頁面 UI 組件。
    - 串接後端 API，實現動態資料顯示與互動功能。
5.  **部署**:將部屬至本機電腦使用Docker與K8s管理，並且會導入CICD流程，會使用Git Action自動化工具。

---

我們可以從 **第二部分「技術棧」的選擇** 或 **第三部分「開發步驟」的第一步** 開始深入討論。您對 UI 框架或狀態管理工具有沒有偏好？或者您想先一起規劃更詳細的資料庫結構？
